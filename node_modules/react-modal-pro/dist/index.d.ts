import { ReactNode } from 'react';
import * as react_jsx_runtime from 'react/jsx-runtime';

type DrawerDirection = "left" | "right" | "top" | "bottom";
type ModalControls = {
    modalKey: string;
    openDuration?: number;
    closeDuration?: number;
    sheetClassName?: string;
    backdropClassName?: string;
};
type UseModalProProps = {
    canDismiss?: boolean;
    swipeToOpen?: boolean;
    swipeToClose?: boolean;
    swipeThreshold?: number;
    closeCb?: () => void;
    sheetRef: React.RefObject<HTMLElement | undefined>;
    sidebarDirection?: DrawerDirection;
} & ModalControls;

type ModalProviderProps = {
    defaultCanDismiss?: boolean;
    defaultOpenDuration?: number;
    defaultCloseDuration?: number;
    defaultSheetClassName?: string;
    defaultBackdropClassName?: string;
};
type SidebarExtendedProps = {
    children: ReactNode;
    TriggerElement: ReactNode;
};
type SidebarModalProps = {
    direction: "left" | "right";
} & Omit<UseModalProProps, "sheetRef" | "sidebarDirection"> & SidebarExtendedProps;
type ProSheetExtendedProps = {
    children: ReactNode;
    TriggerElement: ReactNode;
};
type ProSheetModalProps = {
    direction: "top" | "bottom";
} & Omit<UseModalProProps, "sheetRef" | "sidebarDirection"> & ProSheetExtendedProps;
type DialogExtendedProps = {
    children: ReactNode;
    TriggerElement: ReactNode;
};
type DialogModalProps = DialogExtendedProps & Omit<UseModalProProps, "sheetRef" | "swipeToOpen" | "swipeToClose" | "swipeThreshold" | "sidebarDirection">;

declare const useModalController: (key: string) => {
    open: boolean;
    willBeClosed: boolean;
    handleOpenModal: () => void;
    handleCloseModal: () => void;
};

declare const Dialog: ({ TriggerElement, children, ...props }: DialogModalProps) => react_jsx_runtime.JSX.Element;

declare const Sidebar: ({ direction, ...sidebarProps }: SidebarModalProps) => react_jsx_runtime.JSX.Element;

declare const ProSheet: ({ TriggerElement, direction, children, ...props }: ProSheetModalProps) => react_jsx_runtime.JSX.Element;

declare const ProModalProvider: ({ children, ...props }: ModalProviderProps & {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

export { Dialog, type DialogModalProps, ProModalProvider, ProSheet, type ProSheetModalProps, Sidebar, type SidebarModalProps, useModalController };
